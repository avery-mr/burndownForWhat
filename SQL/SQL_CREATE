-- MySQL Script generated by MySQL Workbench
-- Fri Apr 11 18:26:28 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema BelayBuddy
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema BelayBuddy
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BelayBuddy` DEFAULT CHARACTER SET utf8 ;
USE `BelayBuddy` ;

-- -----------------------------------------------------
-- Table `BelayBuddy`.`User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BelayBuddy`.`User` ;

CREATE TABLE IF NOT EXISTS `BelayBuddy`.`User` (
  `UserID` INT NOT NULL AUTO_INCREMENT,
  `Username` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  `State` VARCHAR(45) NOT NULL,
  `City` VARCHAR(45) NOT NULL,
  `Experience` INT NOT NULL,
  `Bio` TEXT NULL,
  PRIMARY KEY (`UserID`),
  UNIQUE INDEX `username_UNIQUE` (`Username` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`Email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BelayBuddy`.`Buddy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BelayBuddy`.`Buddy` ;

CREATE TABLE IF NOT EXISTS `BelayBuddy`.`Buddy` (
  `UserID` INT NOT NULL,
  `FriendID` INT NOT NULL,
  `Status` ENUM('pending', 'confirmed', 'declined') NOT NULL,
  PRIMARY KEY (`UserID`, `FriendID`),
  INDEX `FK_friendID_idx` (`FriendID` ASC) INVISIBLE,
  CONSTRAINT `FK_userID`
    FOREIGN KEY (`UserID`)
    REFERENCES `BelayBuddy`.`User` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_friendID`
    FOREIGN KEY (`FriendID`)
    REFERENCES `BelayBuddy`.`User` (`UserID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BelayBuddy`.`Message`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BelayBuddy`.`Message` ;

CREATE TABLE IF NOT EXISTS `BelayBuddy`.`Message` (
  `MessageID` INT NOT NULL AUTO_INCREMENT,
  `SenderID` INT NOT NULL,
  `ReceiverID` INT NOT NULL,
  `Text` TEXT NOT NULL,
  `Timestamp` DATETIME NOT NULL,
  PRIMARY KEY (`MessageID`),
  INDEX `FK_sender_idx` (`SenderID` ASC) VISIBLE,
  INDEX `FK_receiver_idx` (`ReceiverID` ASC) VISIBLE,
  CONSTRAINT `FK_sender`
    FOREIGN KEY (`SenderID`)
    REFERENCES `BelayBuddy`.`User` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_receiver`
    FOREIGN KEY (`ReceiverID`)
    REFERENCES `BelayBuddy`.`User` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BelayBuddy`.`Style`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BelayBuddy`.`Style` ;

CREATE TABLE IF NOT EXISTS `BelayBuddy`.`Style` (
  `StyleID` INT NOT NULL AUTO_INCREMENT,
  `StyleName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`StyleID`),
  UNIQUE INDEX `name_UNIQUE` (`StyleName` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BelayBuddy`.`Location`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BelayBuddy`.`Location` ;

CREATE TABLE IF NOT EXISTS `BelayBuddy`.`Location` (
  `LocationID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Style` INT NOT NULL,
  `State` VARCHAR(45) NOT NULL,
  `City` VARCHAR(45) NOT NULL,
  `Address` VARCHAR(45) NOT NULL,
  `AverageRating` DECIMAL(3,2) NOT NULL,
  `UserRating` INT NULL,
  `Notes` TEXT NULL,
  PRIMARY KEY (`LocationID`),
  INDEX `FK_style_idx` (`Style` ASC) VISIBLE,
  CONSTRAINT `FK_style`
    FOREIGN KEY (`Style`)
    REFERENCES `BelayBuddy`.`Style` (`StyleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BelayBuddy`.`Event`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BelayBuddy`.`Event` ;

CREATE TABLE IF NOT EXISTS `BelayBuddy`.`Event` (
  `EventID` INT NOT NULL AUTO_INCREMENT,
  `HostID` INT NOT NULL,
  `ClimberID1` INT,
  `ClimberID2` INT,
  `ClimberID3` INT,
  `ClimberID4` INT,
  `ClimberID5` INT,
  `DateTime` DATETIME NOT NULL,
  `LocationID` INT NOT NULL,
  `PrimaryStyleID` INT,
  `SecondaryStyleID` INT,
  `Status` ENUM('Going', 'Not Going', 'Full') NOT NULL,
  `Notes` TEXT,
  PRIMARY KEY (`EventID`),
  INDEX `FK_userID_idx` (`ClimberID1` ASC, `ClimberID2` ASC, `ClimberID3` ASC, `ClimberID4` ASC, `ClimberID5` ASC) VISIBLE,
  INDEX `FK_style_idx` (`PrimaryStyleID` ASC) VISIBLE,
  INDEX `FK_secstyle_idx` (`SecondaryStyleID` ASC) VISIBLE,
  INDEX `FK_location_idx` (`LocationID` ASC) VISIBLE,
  CONSTRAINT `FK_climber1`
    FOREIGN KEY (`ClimberID1`) REFERENCES `BelayBuddy`.`User`(UserID),
  CONSTRAINT `FK_climber2`
    FOREIGN KEY (`ClimberID2`) REFERENCES `BelayBuddy`.`User`(UserID),
  CONSTRAINT `FK_climber3`
    FOREIGN KEY (`ClimberID3`) REFERENCES `BelayBuddy`.`User`(UserID),
  CONSTRAINT `FK_climber4`
    FOREIGN KEY (`ClimberID4`) REFERENCES `BelayBuddy`.`User`(UserID),
  CONSTRAINT `FK_climber5`
    FOREIGN KEY (`ClimberID5`) REFERENCES `BelayBuddy`.`User`(UserID),
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_primstyle`
    FOREIGN KEY (`PrimaryStyleID`)
    REFERENCES `BelayBuddy`.`Style` (`StyleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_host`
    FOREIGN KEY (`HostID`)
    REFERENCES `BelayBuddy`.`User` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_secstyle`
    FOREIGN KEY (`SecondaryStyleID`)
    REFERENCES `BelayBuddy`.`Style` (`StyleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_location`
    FOREIGN KEY (`LocationID`)
    REFERENCES `BelayBuddy`.`Location` (`LocationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BelayBuddy`.`UserRating`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BelayBuddy`.`UserRating` ;

CREATE TABLE IF NOT EXISTS `BelayBuddy`.`UserRating` (
  `RatingID` INT NOT NULL AUTO_INCREMENT,
  `LocationID` INT NOT NULL,
  `UserID` INT NOT NULL,
  `Rating` INT NOT NULL,
  PRIMARY KEY (`RatingID`),
  INDEX `FK_location_idx` (`LocationID` ASC) VISIBLE,
  INDEX `FK_user_idx` (`UserID` ASC) VISIBLE,
  CONSTRAINT `FK_location`
    FOREIGN KEY (`LocationID`)
    REFERENCES `BelayBuddy`.`Location` (`LocationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_user`
    FOREIGN KEY (`UserID`)
    REFERENCES `BelayBuddy`.`User` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `BelayBuddy`.`UserStyle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BelayBuddy`.`UserStyle` ;

CREATE TABLE IF NOT EXISTS `BelayBuddy`.`UserStyle` (
  `UserID` INT NOT NULL,
  `StyleID` INT NOT NULL,
  PRIMARY KEY (`UserID`, `StyleID`),
  INDEX `StyleID_idx` (`StyleID` ASC) VISIBLE,
  CONSTRAINT `UserID`
    FOREIGN KEY (`UserID`)
    REFERENCES `BelayBuddy`.`User` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `StyleID`
    FOREIGN KEY (`StyleID`)
    REFERENCES `BelayBuddy`.`Style` (`StyleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


USE `BelayBuddy`;

DELIMITER $$

USE `BelayBuddy`$$
DROP TRIGGER IF EXISTS `BelayBuddy`.`UserRating_AFTER_INSERT` $$
USE `BelayBuddy`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BelayBuddy`.`UserRating_AFTER_INSERT` AFTER INSERT ON `UserRating` FOR EACH ROW
BEGIN
	UPDATE Location
	SET AverageRating = (
		SELECT ROUND(COALESCE(AVG(Rating), 0.00), 2)
		FROM UserRating
		WHERE LocationID = NEW.LocationID
	)	
    WHERE LocationID = NEW.LocationID;
END$$


USE `BelayBuddy`$$
DROP TRIGGER IF EXISTS `BelayBuddy`.`UserRating_AFTER_UPDATE` $$
USE `BelayBuddy`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BelayBuddy`.`UserRating_AFTER_UPDATE` AFTER UPDATE ON `UserRating` FOR EACH ROW
BEGIN
	UPDATE Location
    SET AverageRating = (
        SELECT ROUND(COALESCE(AVG(Rating), 0.00), 2)
        FROM UserRating
        WHERE LocationID = OLD.LocationID
    )
    WHERE LocationID = OLD.LocationID;
END$$


USE `BelayBuddy`$$
DROP TRIGGER IF EXISTS `BelayBuddy`.`UserRating_AFTER_DELETE` $$
USE `BelayBuddy`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BelayBuddy`.`UserRating_AFTER_DELETE` AFTER DELETE ON `UserRating` FOR EACH ROW
BEGIN
	UPDATE Location
    SET AverageRating = (
		SELECT ROUND(COALESCE(AVG(Rating), 0.00), 2)
        FROM UserRating
        WHERE LocationID = OLD.LocationID
	)
    WHERE LocationID = OLD.LocationID;
END$$


DELIMITER ;

INSERT INTO `Style` (`StyleName`) VALUES
	('Bouldering'),
	('Sport'),
	('Trad'),
	('Top-Rope'),
	('Indoor'),
	('Lead'),
	('Alpine'),
	('Aid'),
	('Mixed');

INSERT INTO `User` (`Username`, `Email`, `State`, `City`, `Experience`, `Bio`) VALUES
	('climbzRcool', 'cool@climb.com', 'Colorado', 'Boulder', 5, 'Lover of granite'),
	('chalkup', 'grip@protonmail.com', 'California', 'San Diego', 3, 'Sandstone specialist'),
	('belayqueen', 'ropequeen@cruxmail.com', 'Utah', 'Moab', 7, 'Trad and tacos'),
	('cruxjunkie', 'beta@stone.net', 'Nevada', 'Las Vegas', 4, 'Chasing the send in Red Rock'),
	('dynoDan', 'hopskip@jumpmail.com', 'Oregon', 'Portland', 2, 'Boulders and beers'),
	('racknrope', 'tradster@cragmail.com', 'Washington', 'Seattle', 6, 'Big walls and big coffee');

INSERT INTO `Location` (`Name`, `Style`, `State`, `City`, `Address`, `AverageRating`, `UserRating`, `Notes`) VALUES
	('Eldorado Canyon', 3, 'Colorado', 'Eldorado Springs', 'Eldorado Canyon State Park', 0.00, NULL, 'Classic trad routes'),
	('Mission Cliffs Gym', 5, 'California', 'San Francisco', '2295 Harrison St', 0.00, NULL, 'Great indoor setting'),
	('Indian Creek', 3, 'Utah', 'Moab', 'County Road 211', 0.00, NULL, 'Splitter cracks galore'),
	('Red Rock Canyon', 3, 'Nevada', 'Las Vegas', 'Scenic Loop Dr', 0.00, NULL, 'Desert trad wonderland'),
	('Planet Granite', 5, 'Oregon', 'Portland', '1405 NW 14th Ave', 0.00, NULL, 'Modern indoor bouldering and sport'),
	('Index Town Wall', 3, 'Washington', 'Index', 'Index-Galena Rd', 0.00, NULL, 'Granite trad lines and runouts');

INSERT INTO `Message` (`SenderID`, `ReceiverID`, `LocationID`, `Text`, `Timestamp`) VALUES
	(1, 2, 1, 'Hey! Climbing at The Spot this weekend?', NOW() - INTERVAL 2 DAY),
	(2, 1, 1, 'Sounds good! I'll bring my gear.', NOW() - INTERVAL 1 DAY),
	(3, 1, 3, 'Up for a mission on El Cap?', NOW() - INTERVAL 5 DAY),
	(1, 3, 3, 'Absolutely Let's do the Nose.', NOW() - INTERVAL 4 DAY),
	(2, 3, 2, 'Want to meet up in Moab for some cracks?', NOW() - INTERVAL 3 DAY),
	(3, 2, 2, 'I'm in. Been itching to climb that route!', NOW() - INTERVAL 2 DAY);

INSERT INTO `UserRating` (`LocationID`, `UserID`, `Rating`) VALUES
	(1, 1, 5),
	(1, 2, 4),
	(1, 3, 5),
	(2, 1, 3),
	(2, 2, 5),
	(2, 3, 4),
	(3, 1, 5),
	(3, 2, 4),
	(3, 3, 5);

INSERT INTO `Event` (`HostID`, `DateTime`, `LocationID`, `PrimaryStyle`, `SecondaryStyle`, `Status`, `Notes`) VALUES
	(1, '2025-04-15 09:00:00', 1, 1, NULL, 'Going', 'Morning session at the local gym'),              
	(2, '2025-04-16 18:30:00', 2, 2, 4, 'Full', 'After-work climb, bring snacks!'),                   
	(3, '2025-04-17 14:00:00', 3, 3, NULL, 'Not Going', 'Weekend warm-up on the slab routes'),        
	(1, '2025-04-18 10:00:00', 2, 4, 2, 'Going', 'Trying some new routes today'),                     
	(2, '2025-04-19 08:00:00', 1, 1, NULL, 'Not Going', 'Weather turned bad — rescheduling'),         
	(3, '2025-04-20 13:00:00', 3, 6, 9, 'Full', 'Mixed styles today — all levels welcome');

INSERT INTO `Buddy` (`UserID`, `FriendID`, `Status`) VALUES
	(1, 2, 'confirmed'),
	(1, 3, 'pending'),
	(2, 4, 'confirmed'),
	(3, 1, 'declined'),  
	(4, 5, 'confirmed'),
	(5, 2, 'pending'),
	(6, 1, 'confirmed'),
	(3, 6, 'confirmed'),
	(2, 6, 'pending'),
	(5, 3, 'declined');

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
